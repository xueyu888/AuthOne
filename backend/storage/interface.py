# backend/storage/interface.py
from __future__ import annotations
from typing import Protocol, runtime_checkable
from ..models import Account, Group, Permission, Resource, Role

__all__ = ["PermissionRepository","RoleRepository","GroupRepository","AccountRepository","ResourceRepository"]

@runtime_checkable
class PermissionRepository(Protocol):
    async def add(self, permission: Permission) -> None: ...
    async def get(self, permission_id: str) -> Permission | None: ...
    async def list(self, tenant_id: str | None = None) -> list[Permission]: ...
    async def delete(self, permission_id: str) -> bool: ...

@runtime_checkable
class RoleRepository(Protocol):
    async def add(self, role: Role) -> None: ...
    async def get(self, role_id: str) -> Role | None: ...
    async def list(self, tenant_id: str | None = None) -> list[Role]: ...
    async def delete(self, role_id: str) -> bool: ...
    async def assign_permission(self, role_id: str, permission_id: str) -> None: ...
    async def remove_permission(self, role_id: str, permission_id: str) -> None: ...

@runtime_checkable
class GroupRepository(Protocol):
    async def add(self, group: Group) -> None: ...
    async def get(self, group_id: str) -> Group | None: ...
    async def list(self, tenant_id: str | None = None) -> list[Group]: ...
    async def delete(self, group_id: str) -> bool: ...
    async def assign_role(self, group_id: str, role_id: str) -> None: ...
    async def remove_role(self, group_id: str, role_id: str) -> None: ...

@runtime_checkable
class AccountRepository(Protocol):
    async def add(self, account: Account) -> None: ...
    async def get(self, account_id: str) -> Account | None: ...
    async def list(self, tenant_id: str | None = None) -> list[Account]: ...
    async def delete(self, account_id: str) -> bool: ...
    async def assign_role(self, account_id: str, role_id: str) -> None: ...
    async def remove_role(self, account_id: str, role_id: str) -> None: ...
    async def assign_group(self, account_id: str, group_id: str) -> None: ...
    async def remove_group(self, account_id: str, group_id: str) -> None: ...

@runtime_checkable
class ResourceRepository(Protocol):
    async def add(self, resource: Resource) -> None: ...
    async def get(self, resource_id: str) -> Resource | None: ...
    async def list(self, tenant_id: str | None = None) -> list[Resource]: ...
    async def delete(self, resource_id: str) -> bool: ...
