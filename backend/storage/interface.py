from __future__ import annotations
from abc import ABC, abstractmethod
from typing import Optional, List
from ..db import PermissionModel, RoleModel, GroupModel, AccountModel, ResourceModel

class PermissionRepository(ABC):
    @abstractmethod
    async def add(self, *, name: str, description: str | None = None) -> PermissionModel: ...
    @abstractmethod
    async def get(self, permission_id: str) -> Optional[PermissionModel]: ...
    @abstractmethod
    async def list(self) -> List[PermissionModel]: ...
    @abstractmethod
    async def delete(self, permission_id: str) -> bool: ...

class RoleRepository(ABC):
    @abstractmethod
    async def add(self, *, tenant_id: str | None, name: str, description: str | None = None) -> RoleModel: ...
    @abstractmethod
    async def get(self, role_id: str) -> Optional[RoleModel]: ...
    @abstractmethod
    async def list(self, tenant_id: str | None = None) -> List[RoleModel]: ...
    @abstractmethod
    async def delete(self, role_id: str) -> bool: ...
    @abstractmethod
    async def assign_permission(self, role_id: str, permission_id: str) -> None: ...
    @abstractmethod
    async def remove_permission(self, role_id: str, permission_id: str) -> None: ...

class GroupRepository(ABC):
    @abstractmethod
    async def add(self, *, tenant_id: str | None, name: str, description: str | None = None) -> GroupModel: ...
    @abstractmethod
    async def get(self, group_id: str) -> Optional[GroupModel]: ...
    @abstractmethod
    async def list(self, tenant_id: str | None = None) -> List[GroupModel]: ...
    @abstractmethod
    async def delete(self, group_id: str) -> bool: ...
    @abstractmethod
    async def assign_role(self, group_id: str, role_id: str) -> None: ...
    @abstractmethod
    async def remove_role(self, group_id: str, role_id: str) -> None: ...

class AccountRepository(ABC):
    @abstractmethod
    async def add(self, *, username: str, email: str, tenant_id: str | None) -> AccountModel: ...
    @abstractmethod
    async def get(self, account_id: str) -> Optional[AccountModel]: ...
    @abstractmethod
    async def list(self, tenant_id: str | None = None) -> List[AccountModel]: ...
    @abstractmethod
    async def delete(self, account_id: str) -> bool: ...
    @abstractmethod
    async def assign_role(self, account_id: str, role_id: str) -> None: ...
    @abstractmethod
    async def remove_role(self, account_id: str, role_id: str) -> None: ...
    @abstractmethod
    async def assign_group(self, account_id: str, group_id: str) -> None: ...
    @abstractmethod
    async def remove_group(self, account_id: str, group_id: str) -> None: ...

class ResourceRepository(ABC):
    @abstractmethod
    async def add(self, *, resource_type: str, name: str, tenant_id: str | None, owner_id: str | None, metadata: dict | None = None) -> ResourceModel: ...
    @abstractmethod
    async def get(self, resource_id: str) -> Optional[ResourceModel]: ...
    @abstractmethod
    async def list(self, tenant_id: str | None = None) -> List[ResourceModel]: ...
    @abstractmethod
    async def delete(self, resource_id: str) -> bool: ...