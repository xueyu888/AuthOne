from typing import overload, Literal, Sequence

class Enforcer:
    def __init__(self, model_path: str, adapter: object | None = ..., enable_log: bool = ...) -> None: ...

    # ---------- enforce ----------
    @overload
    def enforce(self, sub: str, obj: str, act: str) -> bool: ...
    @overload
    def enforce(self, sub: str, dom: str, obj: str, act: str) -> bool: ...

    # ---------- policy: basic ----------
    def get_policy(self) -> list[list[str]]: ...
    def get_named_policy(self, ptype: str) -> list[list[str]]: ...

    def add_policy(self, *params: str) -> bool: ...
    def remove_policy(self, *params: str) -> bool: ...

    @overload
    def has_policy(self, sub: str, obj: str, act: str) -> bool: ...
    @overload
    def has_policy(self, sub: str, dom: str, obj: str, act: str) -> bool: ...
    def has_policy(self, *params: str) -> bool: ...  # 兜底（非常规 token 个数）

    @overload
    def add_named_policy(self, ptype: Literal["p"], sub: str, obj: str, act: str) -> bool: ...
    @overload
    def add_named_policy(self, ptype: Literal["p"], sub: str, dom: str, obj: str, act: str) -> bool: ...
    def add_named_policy(self, ptype: str, *params: str) -> bool: ...

    @overload
    def remove_named_policy(self, ptype: Literal["p"], sub: str, obj: str, act: str) -> bool: ...
    @overload
    def remove_named_policy(self, ptype: Literal["p"], sub: str, dom: str, obj: str, act: str) -> bool: ...
    def remove_named_policy(self, ptype: str, *params: str) -> bool: ...

    @overload
    def has_named_policy(self, ptype: Literal["p"], sub: str, obj: str, act: str) -> bool: ...
    @overload
    def has_named_policy(self, ptype: Literal["p"], sub: str, dom: str, obj: str, act: str) -> bool: ...
    def has_named_policy(self, ptype: str, *params: str) -> bool: ...

    # ---------- policy: filtered ----------
    def get_filtered_policy(self, field_index: int, *field_values: str) -> list[list[str]]: ...
    def remove_filtered_policy(self, field_index: int, *field_values: str) -> bool: ...

    def get_filtered_named_policy(self, ptype: str, field_index: int, *field_values: str) -> list[list[str]]: ...
    def remove_filtered_named_policy(self, ptype: str, field_index: int, *field_values: str) -> bool: ...

    # ---------- policy: batch ----------
    def add_policies(self, rules: Sequence[Sequence[str]]) -> bool: ...
    def remove_policies(self, rules: Sequence[Sequence[str]]) -> bool: ...
    def add_named_policies(self, ptype: str, rules: Sequence[Sequence[str]]) -> bool: ...
    def remove_named_policies(self, ptype: str, rules: Sequence[Sequence[str]]) -> bool: ...

    # ---------- permissions for user ----------
    def add_permission_for_user(self, user: str, *perm: str) -> bool: ...
    def get_permissions_for_user(self, user: str) -> list[tuple[str, ...]]: ...
    def has_permission_for_user(self, user: str, *perm: str) -> bool: ...
    def delete_permission_for_user(self, user: str, *perm: str) -> bool: ...
    def delete_permissions_for_user(self, user: str) -> bool: ...

    # ---------- roles / grouping: queries ----------
    def get_roles_for_user(self, user: str) -> list[str]: ...
    def get_users_for_role(self, role: str) -> list[str]: ...
    def get_roles_for_user_in_domain(self, user: str, domain: str) -> list[str]: ...
    def get_users_for_role_in_domain(self, role: str, domain: str) -> list[str]: ...

    # ---------- roles / grouping: basic ----------
    def get_grouping_policy(self) -> list[list[str]]: ...
    def get_named_grouping_policy(self, ptype: str) -> list[list[str]]: ...

    @overload
    def add_grouping_policy(self, user: str, role: str) -> bool: ...
    @overload
    def add_grouping_policy(self, user: str, role: str, domain: str) -> bool: ...
    def add_grouping_policy(self, *params: str) -> bool: ...

    @overload
    def remove_grouping_policy(self, user: str, role: str) -> bool: ...
    @overload
    def remove_grouping_policy(self, user: str, role: str, domain: str) -> bool: ...
    def remove_grouping_policy(self, *params: str) -> bool: ...

    @overload
    def has_grouping_policy(self, user: str, role: str) -> bool: ...
    @overload
    def has_grouping_policy(self, user: str, role: str, domain: str) -> bool: ...
    def has_grouping_policy(self, *params: str) -> bool: ...

    @overload
    def add_named_grouping_policy(self, ptype: Literal["g"], user: str, role: str) -> bool: ...
    @overload
    def add_named_grouping_policy(self, ptype: Literal["g"], user: str, role: str, domain: str) -> bool: ...
    def add_named_grouping_policy(self, ptype: str, *params: str) -> bool: ...

    @overload
    def remove_named_grouping_policy(self, ptype: Literal["g"], user: str, role: str) -> bool: ...
    @overload
    def remove_named_grouping_policy(self, ptype: Literal["g"], user: str, role: str, domain: str) -> bool: ...
    def remove_named_grouping_policy(self, ptype: str, *params: str) -> bool: ...

    @overload
    def has_named_grouping_policy(self, ptype: Literal["g"], user: str, role: str) -> bool: ...
    @overload
    def has_named_grouping_policy(self, ptype: Literal["g"], user: str, role: str, domain: str) -> bool: ...
    def has_named_grouping_policy(self, ptype: str, *params: str) -> bool: ...

    # ---------- roles / grouping: filtered ----------
    def get_filtered_grouping_policy(self, field_index: int, *field_values: str) -> list[list[str]]: ...
    def remove_filtered_grouping_policy(self, field_index: int, *field_values: str) -> bool: ...
    def get_filtered_named_grouping_policy(self, ptype: str, field_index: int, *field_values: str) -> list[list[str]]: ...
    def remove_filtered_named_grouping_policy(self, ptype: str, field_index: int, *field_values: str) -> bool: ...

    # ---------- persistence ----------
    def load_policy(self) -> None: ...
    def save_policy(self) -> None: ...
